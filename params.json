{"name":"About Mercurial, Git, and Github","tagline":"Keep it Simple","body":"I have gathered in this page my notes on using _Github_, _Mercurial with Github_, and _Git_ (outside of Github) but from a Mercurial user point of view, and also from a lover-of-simplicity point of view :-).\r\n\r\nIn case of mistakes, please do not hesitate to use the current project issues to report them by simply [creating a new issue](https://github.com/cmuller/cmuller.github.io/issues/new) on this project.\r\n\r\n# Using github\r\n\r\nPlease find some information below on Github usage.\r\n\r\nGithub is very well documented and for what is not described below, chances are the [Github bootstrap articles](https://help.github.com/categories/54/articles) will be helpful.\r\n\r\n## How to create static pages\r\n\r\nTo create \"pages\", see https://help.github.com/articles/creating-pages-with-the-automatic-generator (a bootstrap kind of doc).\r\n\r\nPages can be attached to:\r\n* organizations,\r\n* persons, like this one, or\r\n* projects (repositories)\r\n\r\n## How to use Mercurial with a Github repository\r\n\r\nYou do not need to have Git installed in order to commit and push your changes back to Github. You will need Mercurial, obviously, and also the _Dulwhich_ Python library and the _hg-git_ extension; which installations are covered in the first step below. Once the extension has been enabled, the rest is pretty straightforward for Mercurial users: clone, commit and push as usual.\r\n\r\n### download and install hg-git\r\n\r\n```sh\r\n$ mkdir -p $HOME/.hgext\r\n$ cd $HOME/.hgext\r\n$ wget http://www.samba.org/~jelmer/dulwich/dulwich-0.8.7.tar.gz\r\n$ tar zxvf dulwich-0.8.7.tar.gz\r\n$ rm dulwich-0.8.7.tar.gz\r\n$ cd dulwich-0.8.7\r\n$ ./setup.py build\r\n$ sudo ./setup.py install\r\n[sudo] password for cmuller: \r\nrunning install\r\n[...]\r\n$ cd $HOME/.hgext\r\n$ hg clone https://bitbucket.org/durin42/hg-git\r\n$ cd hg-git/\r\n$ hg update -C 'max(tagged())'\r\n```\r\n\r\n### enable the hg-git extension in $HOME/.hgrc\r\n\r\n```sh\r\n[extensions]\r\nhg-git = $HOME/.hgext/hg-git/hggit\r\n```\r\n\r\n### clone the repository using Mercurial\r\n\r\n```sh\r\n$ hg clone git+ssh://git@github.com:cmuller/test.git\r\n$ cd test\r\n$ hg branch\r\ndefault\r\n$ hg bookmark\r\n * master                    1:0b48f2edc3f7\r\n$ hg pull -u\r\npulling from git+ssh://git@github.com:cmuller/test.git\r\n[\"git-upload-pack 'cmuller/test.git'\"]\r\nno changes found\r\n```\r\n\r\n### commit some changes\r\n\r\n```sh\r\n$ vi README.md \r\n$ hg status\r\nM README.md\r\n$ hg commit -m\"test of commit using hg\"\r\n$ hg status\r\n$ hg outgoing\r\ncomparing with git+ssh://git@github.com:cmuller/test.git\r\n[\"git-receive-pack 'cmuller/test.git'\"]\r\nsearching for changes\r\nchangeset:   2:2ee128a7362a\r\nbookmark:    master\r\ntag:         tip\r\nuser:        Christophe Muller <...>\r\ndate:        [...]\r\nsummary:     test of commit using hg\r\n```\r\n\r\n### push your changes back to Github\r\n\r\n```sh\r\n$ hg push\r\npushing to git+ssh://git@github.com:cmuller/test.git\r\nsearching for changes\r\n[\"git-receive-pack 'cmuller/test.git'\"]\r\n```\r\n\r\nNotes:\r\n\r\n1. it works. see https://github.com/cmuller/test/commit/a0b9ae9aa49118a915f1784894967f8e938ccf9e :-)\r\n2. it is interoperable with the usage of Git on the same repository. E.g.,\r\n\r\n```sh\r\n$ cd /tmp\r\n$ git clone git@github.com:cmuller/test.git\r\n$ cd test\r\n$ git branch\r\n* master\r\n$ git show HEAD\r\ncommit a0b9ae9aa49118a915f1784894967f8e938ccf9e\r\nAuthor: Christophe Muller <...>\r\nDate:   [...]\r\n    test of commit using hg\r\n[...]\r\n```\r\n# Using git\r\n\r\nThis is my cheatsheet for using git, with a few links to tutorials that I found useful.\r\n\r\n## Some Git equivalent to Hg commands\r\n\r\nThis is my Hg to Git cheatsheet. A complete list exist [in the mercurial wiki](http://mercurial.selenic.com/wiki/GitConcepts#Command_equivalence_table) that you might want to check in addition with the explanations on the deep differences (e.g., on branches). I advocate using only default in mercurial and master in git :-) so I won't get into these details. As for the equivalences, I have put below mostly what I use every day, so this is not an exhaustive list.\r\n\r\n### help\r\n\r\n`hg help` -> `git help`\r\n\r\nIn hg you basically need to know that the concept you are looking for exists or is implemented by an extension; after that, `hg help`, 99% of the time, is enough and provides you with the information you need. On the other hand with git it is probably better to know beforehand what to do and only spend time in `git help` at the very last resort, i.e., after google, SO, etc.\r\n\r\n### basic commands\r\n\r\n`hg init` -> `git init`\r\n\r\n`hg clone` -> `git clone`\r\n\r\n`hg add` -> `git add`\r\n\r\n`hg commit` -> `git commit -a`\r\n\r\n`hg update -u` -> `git pull`\r\n\r\n`hg push` -> `git push`\r\n\r\nNot much differences here except the use of the staging area in git (you need to do `git add` before `git commit` or use the `-a` option) and the git pull which on the other hand does what we want in a single command.\r\n\r\n### displaying information\r\n\r\n`hg paths` -> `git remote -v`\r\n\r\n`hg status` -> `git status`\r\n\r\n`hg diff` -> `git diff`\r\n\r\n`hg id` -> `git rev-parse --verify --short HEAD`\r\n\r\n`hg tip -p` -> `git show`\r\n\r\n`hg log -r 112 -p` -> `git show 2a0867...`\r\n\r\n`hg branches` -> `git branch -a`\r\n\r\n`hg branch` -> `git branch`\r\n\r\nNote that if a `git add` has already been performed on the modified file, the modification has moved to the staging area, so `git diff --cached` should be used in order to see it. The `git show` command is quite nice and easy to use. On the contrary if you really need to often get the current id, you'd better create an alias for that..\r\n\r\n### more complex (dangerous) commands\r\n\r\n`hg update -C` -> `git checkout --force`\r\n\r\n`hg revert` -> `git reset --hard`\r\n\r\n`hg backout` -> `git revert`\r\n\r\nPlease note that the *revert-type* commands are completely different between Hg and Git so please double check the documentation before using! :-)\r\n\r\n### local server\r\n\r\n`hg serve` -> `git daemon --reuseaddr --base-path=. --export-all --verbose`\r\n\r\nOnce `hg serve` is launched, a local server is started from which it is possible to clone, pull, push, etc. (using http protocol). Similarly with the above git command, a local server is started and it is possible to clone using the git protocol, e.g.,\r\n\r\n`git clone git://<ip-address>/.git project`\r\n\r\n## Some Miscellaneous Information\r\n\r\n### My git links\r\n\r\nThere are literally hundreds of docs, tutorials, posts, manuals, books etc. on Git. That probably.. shows the need :-) Below are just two links I found useful: the first one is the very minimal survival guide (but not Mercurial-user oriented) in which you will learn what is the Index, the staging area, how to push to a central repo, how to use branches, etc. The second one is not actually git-specific, it helps you ask yourself the right question and helps you choose a workflow that suits your needs.\r\n\r\n* git - the simple guide: http://rogerdudler.github.io/git-guide/\r\n* Git Makes Me Angry Inside: http://www.slideshare.net/emmajane/git-makes-me-angry-inside\r\n\r\n### FAQ: How to create a new repository on a server\r\n\r\nWhereas with mercurial-server it is possible to create a repository on a server by simpy cloning from your machine to the server's URL, this is not possible with git: you have to manually at least create a directory on the server (with the right access-rights, e.g., for your group of developers) _init_ it, and then push to it, e.g.,\r\n\r\n1. log in the server\r\n2. `mkdir /var/lib/git/repo.git`\r\n3. `cd /var/lib/git/repo.git`\r\n4. `git init --bare --shared`\r\n5. `find . -type d -exec chmod 775 {} \\;`\r\n6. `find . -type f -exec chmod 664 {} \\;`\r\n7. exit\r\n8. on your PC, link to the server and then push to it, e.g.,\r\n\r\n`git remote add origin ssh://<server>/var/lib/git/repo.git`\r\n\r\n`git push --all origin master`\r\n\r\n### FAQ: How to change a commit log message after commit but before push\r\n\r\n`git commit --amend`\r\n\r\n### How to merge a commit from a branch to master\r\n\r\nIf you have committed on a branch \"b1\" and want to merge this into \"master\", you only need to switch to the master branch, merge, and then you can push master back to the central repo, e.g.,\r\n\r\n`git checkout master`\r\n\r\n`git pull`\r\n\r\n`git merge b1`\r\n\r\n`git push`\r\n\r\nAfter the merge you do not need to commit again: your changeset is already in the outgoing queue with the same metadata (author, date, log message) than the one on the branch.\r\n\r\n### How to permanently remove files or directories that have been committed and pushed\r\n\r\nWhen this happen and something was committed that shouldn't have been, it can be useful to be able to log on the server and make things right again.. E.g., a clear password or confidential information, a huge data file, etc. In Subversion this operation involves using svndump and filters; in Mercurial using the convert extension; and in Git it appears to be a bit touchy as it will involve commands you probably do not use everyday (gc, prune etc.).\r\n\r\nYou can either follow the Github step-by-step tutorial here:\r\nhttps://help.github.com/articles/remove-sensitive-data\r\n\r\nOr try solutions from the SO post below. This is what I did: I created a shell script starting from David Underhill's one: http://dound.com/2009/04/git-forever-remove-files-or-folders-from-history/\r\nand adding the git reflog, fsck, repack, and prune commands as described in:\r\nhttp://stackoverflow.com/questions/2164581/remove-file-from-git-repository-history\r\n\r\nPlease let me know if you would need my script but basically all the commands needed are already in both David blog post and the SO answer.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}